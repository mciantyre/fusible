error[E0277]: `Cell<i32>` cannot be shared between threads safely
  --> tests/ui/timer_interior_mut_share.rs:17:14
   |
17 |             .create_timer(timer.into_ref(), SCHEDULE, &Default::default(), || {
   |              ^^^^^^^^^^^^ `Cell<i32>` cannot be shared between threads safely
   |
   = help: the trait `Sync` is not implemented for `Cell<i32>`, which is required by `{closure@$DIR/tests/ui/timer_interior_mut_share.rs:17:76: 17:78}: TimerRunnable`
   = note: if you want to do aliasing and mutation between multiple threads, use `std::sync::RwLock` or `std::sync::atomic::AtomicI32` instead
   = note: required for `&Cell<i32>` to implement `Send`
note: required because it's used within this closure
  --> tests/ui/timer_interior_mut_share.rs:17:76
   |
17 |             .create_timer(timer.into_ref(), SCHEDULE, &Default::default(), || {
   |                                                                            ^^
   = note: required for `{closure@$DIR/tests/ui/timer_interior_mut_share.rs:17:76: 17:78}` to implement `TimerRunnable`
note: required by a bound in `timer::<impl AppDefine<'_, 'pke>>::create_timer`
  --> src/timer.rs
   |
   |     pub fn create_timer<'ctx, 't, R>(
   |            ------------ required by a bound in this associated function
...
   |         R: TimerRunnable + 'ctx,
   |            ^^^^^^^^^^^^^ required by this bound in `timer::<impl AppDefine<'_, 'pke>>::create_timer`
