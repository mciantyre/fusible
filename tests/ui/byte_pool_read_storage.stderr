error[E0503]: cannot use `storage` because it was mutably borrowed
  --> tests/ui/byte_pool_read_storage.rs:12:13
   |
10 |     let pool = core::pin::pin!(BytePool::context());
   |                ------------------------------------ a temporary with access to the borrow is created here ...
11 |     BytePool::create(pool.into_ref(), &mut storage, &Default::default()).unwrap();
   |                                       ------------ `storage` is borrowed here
12 |     let _ = storage[0];
   |             ^^^^^^^^^^ use of borrowed `storage`
13 | }
   | - ... and the borrow might be used here, when that temporary is dropped and runs the `Drop` code for type `BytePoolContext`
